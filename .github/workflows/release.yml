name: Build & Release

permissions:
  contents: write # Allow token to write and create release

on: workflow_dispatch
  # push:
  #   tags:
  #     - 'v*'          # triggers on tags like v1.0.0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os : [windows-latest]
        # os: [ubuntu-latest, windows-latest]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Build (release)
        run: cargo build --release

      # ─────────────────────────────────────────────────────────────────────
      # Linux: package AppImage
      # - name: Build AppImage
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: AppImageCrafters/build-appimage@master
      #   with:
      #     recipe: "./AppImageBuilder.yml"   # your recipe in repo :contentReference[oaicite:2]{index=2}

      # - name: Upload Linux AppImage
      #   if: matrix.os == 'ubuntu-latest'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: appimage
      #     path: '*.AppImage'

      # ─────────────────────────────────────────────────────────────────────
      # Windows: zip the .exe
      - name: Upload Windows EXE
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: target/release/slot_machine_gui.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # - name: Check out code
      #   uses: actions/checkout@v4
      #   with:
      #     fetch-depth: 0

      # - name: Download Linux AppImage
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: appimage

      - name: Download Windows EXE
        uses: actions/download-artifact@v4
        with:
          name: windows-exe

      # - name: Create GitHub Release
      #   uses: elgohr/Github-Release-Action@v5
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     title: MyReleaseMessage

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # - name: Upload AppImage to Release
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: '*.AppImage'
      #     asset_name: slot_machine.AppImage
      #     asset_content_type: application/x-executable

      - name: Upload Windows EXE to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: slot_machine_gui.exe
          asset_name: slot_machine_gui.exe
          asset_content_type: application/vnd.microsoft.portable-executable